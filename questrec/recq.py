from flask import Flask, render_template, request, send_file
import os
import nltk
import spacy
import re
from PyPDF2 import PdfReader
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.pdfgen import canvas
from reportlab.platypus import Paragraph, SimpleDocTemplate, Spacer
from reportlab.lib import colors
import ssl
from gtts import gTTS 

ssl._create_default_https_context = ssl._create_unverified_context

app = Flask(__name__)

nltk.download('punkt')
nlp = spacy.load("en_core_web_sm")

# Define paths
PAPERS_FOLDER = '/Users/r024k/Desktop/questrec/papers' #where the past papers are located on your device the one inside is an example
DOWNLOAD_FOLDER = '/Users/r024k/Desktop/questrec/downloads' #where the files should be downloaded pdf or audio the one inside the apostrophes is an example
if not os.path.exists(DOWNLOAD_FOLDER):
    os.makedirs(DOWNLOAD_FOLDER)

def extract_text_from_pdf(pdf_path):
    try:
        text = ""
        with open(pdf_path, "rb") as file:
            reader = PdfReader(file)
            for page in reader.pages:
                text += page.extract_text()
        return text
    except Exception as e:
        print(f"Error extracting text from PDF: {e}")
        return ""

def convert_pdfs_to_text(folder_path):
    pdf_texts = {}
    if not os.path.exists(folder_path):
        print(f"Folder '{folder_path}' does not exist.")
        return pdf_texts
    
    for filename in os.listdir(folder_path):
        if filename.endswith(".pdf"):
            pdf_path = os.path.join(folder_path, filename)
            text = extract_text_from_pdf(pdf_path)
            pdf_texts[filename] = text
    return pdf_texts

def generate_questions(topic, pdf_texts):
    topic_tokens = nlp(topic.lower())
    questions = []
    for filename, text in pdf_texts.items():
        text_doc = nlp(text.lower())
        question_block = ""
        capturing_questions = False  
        for sentence in text_doc.sents:
            if any(word in sentence.text.lower() for word in ['copyright', 'acknowledgements', 'blank page']): #removes unnecessary data
                continue
            if any(token.text in sentence.text.lower() for token in topic_tokens):
                capturing_questions = True  
            if capturing_questions:
                cleaned_sentence = re.sub(r'\b\d+\s*9618/\d{2}/sp/\d{2} Â©', '', sentence.text)  #removes subject code for the questions
                cleaned_sentence = re.sub(r'\b\d{1,2}/\d{1,2}/\d{4}\b', '', cleaned_sentence)  #removes the dates from the questions
                if cleaned_sentence.strip():  
                    question_block += cleaned_sentence.strip() + "\n"  
        if question_block: 
            questions.append(question_block.strip())
    return questions

def generate_pdf(topic, questions):
    output_pdf = "output_questions.pdf"

    doc = SimpleDocTemplate(output_pdf, pagesize=letter, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=72)
    styles = getSampleStyleSheet()

    title_style = styles["Title"]
    title_style.textColor = colors.blue

    subtitle_style = ParagraphStyle(
        "Subtitle",
        parent=styles["Normal"],
        fontSize=12,
        textColor=colors.darkgrey,
        spaceAfter=24,
    )

    question_style = ParagraphStyle(
        "Question",
        parent=styles["Normal"],
        fontSize=10,
        textColor=colors.black,
        leading=14,  
        leftIndent=12,
        spaceAfter=18,  
    )

    doc_title = Paragraph(f"Questions on {topic}", title_style)
    subtitle = Paragraph("Generated by ExamQuery", subtitle_style)

    content = [doc_title, subtitle]

    for idx, question in enumerate(questions, start=1):
        if not question[0].isalpha():
            question = f"A. {question}"
        question_para = Paragraph(f"<b>{idx}. {question}</b>", question_style)
        content.append(question_para)
        content.append(Spacer(1, 8))  

    doc.build(content)

    return output_pdf

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        subject = request.form['subject']
        topic = request.form['topic']
        folder_path = os.path.join(PAPERS_FOLDER, subject)
        pdf_texts = convert_pdfs_to_text(folder_path)
        questions = generate_questions(topic, pdf_texts)
        if questions:
            file_format = request.form.get('file_format_radio', 'pdf')  # Get the selected file format
            if file_format == 'audio':
                # Join questions with newline character
                questions_text = '\n'.join(questions)
                
                # Remove dots from the questions
                questions_text = questions_text.replace('.', '')
                
                # Generate TTS
                tts = gTTS(text=questions_text, lang='en', slow=False)
                output_audio = os.path.join(DOWNLOAD_FOLDER, f"{subject}_{topic}_questions.mp3")
                tts.save(output_audio)
                return send_file(output_audio, as_attachment=True)
            else:
                output_pdf = generate_pdf(topic, questions)
                return send_file(output_pdf, as_attachment=True)
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)